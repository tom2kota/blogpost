{"version":3,"sources":["api/jsonPlaceholder.js","actions/index.js","components/UserHeader.js","components/PostList.js","components/App.js","reducers/index.js","reducers/postsReducer.js","reducers/usersReducer.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","fetchUser","id","dispatch","a","jsonPlaceholder","get","response","console","log","type","payload","data","UserHeader","user","this","props","users","find","userIdPosts","name","className","renderUser","Component","connect","state","PostList","fetchPostsAndUsers","posts","map","post","key","title","body","userId","renderList","getState","_","chain","uniq","forEach","value","App","combineReducers","action","Boolean","window","location","hostname","match","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6RAEeA,E,OAAAA,EAAMC,OAAO,CACxBC,QAAS,0CCQAC,EAAY,SAAAC,GAAE,8CAAI,WAAMC,GAAN,eAAAC,EAAA,sEACJC,EAAgBC,IAAhB,iBAA8BJ,IAD1B,OACrBK,EADqB,OAE3BC,QAAQC,IAAI,+BACZN,EAAS,CAACO,KAAM,aAAcC,QAASJ,EAASK,OAChDJ,QAAQC,IAAI,+BAJe,2CAAJ,uDCRrBI,E,2KAEY,IAAD,OACHC,EAAOC,KAAKC,MAAMC,MAAMC,MAAK,SAAAJ,GAAI,OAAIA,EAAKZ,KAAO,EAAKc,MAAMG,eAClE,OAAIL,EACOA,EAAKM,KACT,uB,+BAIP,OAAO,yBAAKC,UAAU,UAEjBN,KAAKO,kB,GAZOC,aAsBVC,eALS,SAAAC,GAAK,MAAK,CAACR,MAAOQ,EAAMR,SAKjCO,CAAyBX,GCnBlCa,E,kLAEElB,QAAQC,IAAI,yCAA0CM,KAAKC,OAM3DD,KAAKC,MAAMW,uB,mCAIX,OAAOZ,KAAKC,MAAMY,MAAMC,KAAI,SAAAC,GAAI,OACxB,yBAAKT,UAAU,OAAOU,IAAKD,EAAK5B,IAC5B,uBAAGmB,UAAU,mCACb,yBAAKA,UAAU,WACX,yBAAKA,UAAU,eACX,4BAAKS,EAAKE,OACV,2BAAIF,EAAKG,OAEb,kBAAC,EAAD,CAAYd,YAAaW,EAAKI,gB,+BAU9C,OACI,yBAAKb,UAAU,2BAA2BN,KAAKoB,kB,GA/BpCZ,aAuCRC,eAFS,SAAAC,GAAK,MAAK,CAACG,MAAOH,EAAMG,SAG5C,CAACD,mBFJ6B,yDAAM,WAAOxB,EAAUiC,GAAjB,SAAAhC,EAAA,sEAC9BD,EAxCgB,uCAAM,WAAMA,GAAN,eAAAC,EAAA,sEACLC,EAAgBC,IAAI,UADf,OACtBC,EADsB,OAI5BJ,EAAS,CAACO,KAAM,cAAeC,QAASJ,EAASK,OAJrB,2CAAN,uDAuCc,OAGpCyB,IAAEC,MAAMF,IAAWR,OACdC,IAAI,UACJU,OACAC,SAAQ,SAAAtC,GAAE,OAAIC,EAASF,EAAUC,OACjCuC,QAP+B,2CAAN,0DEGnBjB,CAEbE,GC1CagB,EAFH,kBAAM,yBAAKrB,UAAU,gBAAe,kBAAC,EAAD,Q,QCCjCsB,cAAgB,CAACf,MCJjB,WAAyB,IAAxBH,EAAuB,uDAAf,GAAImB,EAAW,uCAGnC,OAFApC,QAAQC,IAAI,qEAAsEgB,GAE1EmB,EAAOlC,MACX,IAAK,cACD,OAAOkC,EAAOjC,QAClB,QACI,OAAOc,IDHkCR,MEJtC,WAAyB,IAAxBQ,EAAuB,uDAAf,GAAImB,EAAW,uCAGnC,OAFApC,QAAQC,IAAI,uBAAwBgB,GAE5BmB,EAAOlC,MACX,IAAK,aACD,MAAM,GAAN,mBAAWe,GAAX,CAAkBmB,EAAOjC,UAC7B,QACI,OAAOc,MCKCoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPN,IAAMC,EAAQC,YAAYC,EAAUC,YAAgBC,MAEpDC,IAASC,OACL,kBAAC,IAAD,CAAUN,MAAOA,GACb,kBAAC,EAAD,OAGJO,SAASC,eAAe,SDiHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1D,QAAQ0D,MAAMA,EAAMC,c","file":"static/js/main.6cf0ec70.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default axios.create({\n    baseURL: 'https://jsonplaceholder.typicode.com/'\n})","import _ from \"lodash\";\nimport jsonPlaceholder from \"../api/jsonPlaceholder\";\n\nexport const fetchPosts = () => async dispatch => {\n    const response = await jsonPlaceholder.get('/posts');\n    // console.log('3) ACTION fetch response.data & dispatch to STORE :', response.data);\n\n    dispatch({type: 'FETCH_POSTS', payload: response.data})\n}\n\n// issue: makes a lot of fetch users requests\nexport const fetchUser = id => async dispatch => {\n    const response = await jsonPlaceholder.get(`/users/${id}`);\n    console.log('... About to fetchUser ... ');\n    dispatch({type: 'FETCH_USER', payload: response.data})\n    console.log('... dispatch fetchUser ... ');\n}\n\n\n// solution #1 to solve issue (use Lodash memorize), but need to refetch users when API change them\n// export const fetchUser = id => dispatch => _fetchUser(id, dispatch);\n// const _fetchUser = _.memoize(\n//     async (id, dispatch) => {\n//         const response = await jsonPlaceholder.get(`/users/${id}`);\n//\n//         dispatch({type: 'FETCH_USER', payload: response.data})\n//     }\n// )\n\n// solution #2 to solve issue - find all unique urerIds from list of posts (fetchPosts())\n// & iterate over userIds, call fetchUser() with each userID\n// export const fetchPostsAndUsers = () => async (dispatch, getState) => {\n//     console.log('... About to fetch posts ...')\n//     await dispatch(fetchPosts())\n//     console.log('... Fetched posts ...')\n//\n//     const userIds = _.uniq(_.map(getState().posts, 'userId'));\n//     console.log('... userIds ...', userIds)\n//\n//     userIds.forEach(id => dispatch(fetchUser(id)))\n// }\n\nexport const fetchPostsAndUsers = () => async (dispatch, getState) => {\n    await dispatch(fetchPosts());\n\n    _.chain(getState().posts)\n        .map('userId')\n        .uniq()\n        .forEach(id => dispatch(fetchUser(id)))\n        .value()\n}","import React, {Component} from \"react\";\nimport {connect} from \"react-redux\";\n\nclass UserHeader extends Component {\n\n    renderUser() {\n        const user = this.props.users.find(user => user.id === this.props.userIdPosts);\n        if (user)\n            return user.name;\n        return 'Fetching users ...';\n    }\n\n    render() {\n        return <div className=\"header\">\n            {/*UserHeader with userIdPosts (from: /posts): {this.props.userIdPosts} & (from: /users/id):*/}\n            {this.renderUser()}\n        </div>\n    }\n}\n\nconst mapToStateProps = state => ({users: state.users})\n//\n// export default connect(mapToStateProps, {fetchUser})(UserHeader)\n\n\nexport default connect(mapToStateProps)(UserHeader)\n\n","import React, {Component} from 'react';\nimport {connect} from \"react-redux\";\n// import {fetchPosts} from \"../actions\";\nimport {fetchPostsAndUsers} from \"../actions\";\nimport UserHeader from \"./UserHeader\";\n\nclass PostList extends Component {\n    componentDidMount() {\n        console.log('1) componentDidMount() {this.props} : ', this.props);\n\n        // this.props.fetchPosts();\n        // console.log('2) ACTION CREATOR {this.props.fetchPost()} : ', this.props.fetchPosts());\n\n        // console.log('2) ACTION CREATOR {this.props.fetchPostsAndUsers()} : ', this.props.fetchPostsAndUsers());\n        this.props.fetchPostsAndUsers();\n    }\n\n    renderList() {\n        return this.props.posts.map(post => (\n                <div className=\"item\" key={post.id}>\n                    <i className=\"large middle aligned icon user\"/>\n                    <div className=\"content\">\n                        <div className=\"description\">\n                            <h2>{post.title}</h2>\n                            <p>{post.body}</p>\n                        </div>\n                        <UserHeader userIdPosts={post.userId}/>\n                    </div>\n                </div>\n            )\n        )\n    }\n\n    render() {\n        // console.log('5) render() {this.props.posts} ... PROPS from REDUCER STATE: ', this.props.posts);\n\n        return (\n            <div className=\"ui relaxed divided list\">{this.renderList()}</div>\n        )\n    }\n}\n\n\nconst mapStateToProps = state => ({posts: state.posts})\n\nexport default connect(mapStateToProps,\n    {fetchPostsAndUsers}\n)(PostList)\n\n// export default connect(mapStateToProps,\n//     {fetchPosts}\n// )(PostList)","import React from 'react';\nimport PostList from \"./PostList\";\n\nconst App = () => <div className=\"ui container\"><PostList/></div>\n\nexport default App;\n","import {combineReducers} from \"redux\";\nimport postsReducer from './postsReducer';\nimport usersReducer from \"./usersReducer\";\n\nexport default combineReducers({posts: postsReducer, users: usersReducer})","export default (state = [], action) => {\n    console.log('4) + postsReducer maintains an array of all fetched posts STATE : ', state);\n\n    switch (action.type) {\n        case 'FETCH_POSTS':\n            return action.payload;\n        default:\n            return state\n    }\n}","export default (state = [], action) => {\n    console.log('4) - usersReducer : ', state);\n\n    switch (action.type) {\n        case 'FETCH_USER':\n            return [...state, action.payload];\n        default:\n            return state\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {applyMiddleware, createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport thunk from \"redux-thunk\";\n\nimport App from './components/App';\nimport reducers from './reducers'\nimport * as serviceWorker from './serviceWorker';\n\n\nconst store = createStore(reducers, applyMiddleware(thunk))\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>\n    ,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}